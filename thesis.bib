@book{bruegge2004object,
	title = {Object Oriented Software Engineering Using UML, Patterns, and Java},
	author = {Bruegge, Bernd and Dutoit, Allen H},
	year = {2009},
	publisher = {Prentice Hall}
}

@article{uml-empirical,
	author = {Budgen, D. and Burn, A. J. and Brereton, O. P. and Kitchenham, B. A. and Pretorius, R.},
	title = {Empirical evidence about the UML: a systematic literature review},
	journal = {Software: Practice and Experience},
	volume = {41},
	number = {4},
	pages = {363-392},
	keywords = {UML, systematic literature review},
	doi = {https://doi.org/10.1002/spe.1009},
	url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.1009},
	eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.1009},
	abstract = {Abstract The Unified Modeling Language (UML) was created on the basis of expert opinion and has now become accepted as the ‘standard’ object-oriented modelling notation. Our objectives were to determine how widely the notations of the UML, and their usefulness, have been studied empirically, and to identify which aspects of it have been studied in most detail. We undertook a mapping study of the literature to identify relevant empirical studies and to classify them in terms of the aspects of the UML that they studied. We then conducted a systematic literature review, covering empirical studies published up to the end of 2008, based on the main categories identified. We identified 49 relevant publications, and report the aggregated results for those categories for which we had enough papers— metrics, comprehension, model quality, methods and tools and adoption. Despite indications that a number of problems exist with UML models, researchers tend to use the UML as a ‘given’ and seem reluctant to ask questions that might help to make it more effective. Copyright © 2010 John Wiley \& Sons, Ltd.},
	year = {2011}
}

@inproceedings{uml-learning,
	author = {Krusche, Stephan and von Frankenberg, Nadine and Reimer, Lara Marie and Bruegge, Bernd},
	title = {An Interactive Learning Method to Engage Students in Modeling},
	year = {2020},
	isbn = {9781450371247},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3377814.3381701},
	doi = {10.1145/3377814.3381701},
	abstract = {Modeling is an important skill in software engineering. However, it is often not tangible for students and not appreciated. Students prefer coding because they receive immediate feedback from the compiler. Engaging students in modeling is difficult, especially in large introductory courses.We have developed an interactive learning method for modeling which is based on an easy to use online editor. Students learn modeling in guided tutorials in the lecture right after the theory is introduced and deepen their modeling skills in group work and homework exercises. This learning method was applied in a large introductory course with more than 1000 students.An empirical evaluation of the method demonstrated that the students' learning outcome in modeling improved significantly by up to 87 \%. Students are motivated to use models in their future projects and understand how to approach problems with models. The use of interactive models in programming exercises improves their understanding of the taught concepts.},
	booktitle = {Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering: Software Engineering Education and Training},
	pages = {12–22},
	numpages = {11},
	keywords = {learning management system, online editor, education, learning success, software engineering, modeling, interactive},
	location = {Seoul, South Korea},
	series = {ICSE-SEET '20}
}

@inproceedings{artemis,
	author = {Krusche, Stephan and Seitz, Andreas},
	doi = {10.1145/3159450.3159602},
	pages = {284--289},
	publisher = {ACM},
	series = {49th Technical Symposium on Computer Science Education},
	title = {ArTEMiS: An Automatic Assessment Management System for Interactive Learning},
	year = {2018}
}

@inproceedings{uml-in-practice,
  author={Petre, Marian},
  booktitle={2013 35th International Conference on Software Engineering (ICSE)}, 
  title={UML in practice}, 
  year={2013},
  volume={},
  number={},
  pages={722-731},
  doi={10.1109/ICSE.2013.6606618},
	url={https://ieeexplore.ieee.org/abstract/document/6606618}
}

@inproceedings{collab-on-table,
  author={Basheri, Mohammed and Burd, Liz and Baghaei, Nilufar},
  booktitle={2012 4th International Congress on Engineering Education}, 
  title={Collaborative software design using multi-touch tables}, 
  year={2012},
  volume={},
  number={},
  pages={1-5},
  doi={10.1109/ICEED.2012.6779276},
	url={https://ieeexplore.ieee.org/abstract/document/6779276}
}

@article{cap,
	author = {Gilbert, Seth and Lynch, Nancy},
	title = {Brewer's Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web Services},
	year = {2002},
	issue_date = {June 2002},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {33},
	number = {2},
	issn = {0163-5700},
	url = {https://doi.org/10.1145/564585.564601},
	doi = {10.1145/564585.564601},
	abstract = {When designing distributed web services, there are three properties that are commonly desired: consistency, availability, and partition tolerance. It is impossible to achieve all three. In this note, we prove this conjecture in the asynchronous network model, and then discuss solutions to this dilemma in the partially synchronous model.},
	journal = {SIGACT News},
	month = {jun},
	pages = {51–59},
	numpages = {9}
}

@article{eventually-consistent,
	author = {Vogels, Werner},
	title = {Eventually Consistent},
	year = {2009},
	issue_date = {January 2009},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {52},
	number = {1},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/1435417.1435432},
	doi = {10.1145/1435417.1435432},
	abstract = {Building reliable distributed systems at a worldwide scale demands trade-offs between consistency and availability.},
	journal = {Commun. ACM},
	month = {jan},
	pages = {40–44},
	numpages = {5}
}

@inproceedings{delta-crdt,
  title={Efficient state-based crdts by delta-mutation},
  author={Almeida, Paulo S{\'e}rgio and Shoker, Ali and Baquero, Carlos},
  booktitle={International Conference on Networked Systems},
  pages={62--76},
  year={2015},
  organization={Springer},
	url={https://arxiv.org/pdf/1410.2803.pdf}
}

@InProceedings{crdts,
	author="Shapiro, Marc
	and Pregui{\c{c}}a, Nuno
	and Baquero, Carlos
	and Zawirski, Marek",
	editor="D{\'e}fago, Xavier
	and Petit, Franck
	and Villain, Vincent",
	title="Conflict-Free Replicated Data Types",
	booktitle="Stabilization, Safety, and Security of Distributed Systems",
	year="2011",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="386--400",
	abstract="Replicating data under Eventual Consistency (EC) allows any replica to accept updates without remote synchronisation. This ensures performance and scalability in large-scale distributed systems (e.g., clouds). However, published EC approaches are ad-hoc and error-prone. Under a formal Strong Eventual Consistency (SEC) model, we study sufficient conditions for convergence. A data type that satisfies these conditions is called a Conflict-free Replicated Data Type (CRDT). Replicas of any CRDT are guaranteed to converge in a self-stabilising manner, despite any number of failures. This paper formalises two popular approaches (state- and operation-based) and their relevant sufficient conditions. We study a number of useful CRDTs, such as sets with clean semantics, supporting both add and remove operations, and consider in depth the more complex Graph data type. CRDT types can be composed to develop large-scale distributed applications, and have interesting theoretical properties.",
	isbn="978-3-642-24550-3"
}

@inproceedings{yata,
	author = {Nicolaescu, Petru and Jahns, Kevin and Derntl, Michael and Klamma, Ralf},
	year = {2016},
	month = {11},
	pages = {39-49},
	title = {Near Real-Time Peer-to-Peer Shared Editing on Extensible Data Types},
	doi = {10.1145/2957276.2957310}
}

@article{collab-learning,
  author = {Loes, Chad N.},
  title = {The Effect of Collaborative Learning on Academic Motivation},
  journal = {Teaching \& Learning Inquiry},
  volume = {10},
  year = {2022},
  pages = {17},
  issn = {2167-4779},
  url = {https://eric.ed.gov/?id=EJ1340445},
  abstract = {The study explores the impact of collaborative learning on students' academic motivation, providing insights into the mechanisms through which group work influences engagement and enthusiasm for learning.},
  ericnumber = {EJ1340445}
}

@article{collab-learning-blended,
  title={Exploring collaborative learning effect in blended learning environments},
  author={Sun, Z and Liu, Ruixue and Luo, L and Wu, M and Shi, Changdi},
  journal={Journal of computer assisted learning},
  volume={33},
  number={6},
  pages={575--587},
  year={2017},
  publisher={Wiley Online Library}
}

@article{ot,
	author = {Ellis, C. A. and Gibbs, S. J.},
	title = {Concurrency control in groupware systems},
	year = {1989},
	issue_date = {June 1989},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {18},
	number = {2},
	issn = {0163-5808},
	url = {https://doi.org/10.1145/66926.66963},
	doi = {10.1145/66926.66963},
	abstract = {Groupware systems are computer-based systems that support two or more users engaged in a common task, and that provide an interface to a shared environment. These systems frequently require fine-granularity sharing of data and fast response times. This paper distinguishes real-time groupware systems from other multi-user systems and discusses their concurrency control requirements. An algorithm for concurrency control in real-time groupware systems is then presented. The advantages of this algorithm are its simplicity of use and its responsiveness: users can operate directly on the data without obtaining locks. The algorithm must know some semantics of the operations. However the algorithm's overall structure is independent of the semantic information, allowing the algorithm to be adapted to many situations. An example application of the algorithm to group text editing is given, along with a sketch of its proof of correctness in this particular case. We note that the behavior desired in many of these systems is non-serializable.},
	journal = {SIGMOD Rec.},
	month = {jun},
	pages = {399–407},
	numpages = {9}
}

@inproceedings{diff-sync,
	author = {Fraser, Neil},
	title = {Differential synchronization},
	year = {2009},
	isbn = {9781605585758},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1600193.1600198},
	doi = {10.1145/1600193.1600198},
	abstract = {This paper describes the Differential Synchronization (DS) method for keeping documents synchronized. The key feature of DS is that it is simple and well suited for use in both novel and existing state-based applications without requiring application redesign. DS uses deltas to make efficient use of bandwidth, and is fault-tolerant, allowing copies to converge in spite of occasional errors. We consider practical implementation of DS and describe some techniques to improve its performance in a browser environment.},
	booktitle = {Proceedings of the 9th ACM Symposium on Document Engineering},
	pages = {13–20},
	numpages = {8},
	keywords = {collaboration, synchronization},
	location = {Munich, Germany},
	series = {DocEng '09}
}

@inproceedings{ot-issues,
  title={Operational transformation in real-time group editors: issues, algorithms, and achievements},
  author={Sun, Chengzheng and Ellis, Clarence},
  booktitle={Proceedings of the 1998 ACM conference on Computer supported cooperative work},
  pages={59--68},
  year={1998}
}

@techreport{ot-proof,
  title={{Proving correctness of transformation functions in collaborative editing systems}},
  author={Oster, G{\'e}rald and Urso, Pascal and Molli, Pascal and Imine, Abdessamad},
  url={https://inria.hal.science/inria-00071213},
  type={Research Report},
  number={RR-5795},
  pages={45},
  institution={{INRIA}},
  year={2005},
  keywords={collaborative editing ; operational transformation ; optimistic replication ; formal methods},
  pdf={https://inria.hal.science/inria-00071213/file/RR-5795.pdf},
  hal_id={inria-00071213},
  hal_version={v1},
}

@techreport{og-crdt,
  title={Specification of convergent abstract data types for autonomous mobile computing},
  author={Baquero, Carlos and Moura, Francisco},
  year={1997},
  institution={Technical report, Departamento de Inform{\'a}tica, Universidade do Minho}
}

@techreport{crdt-list,
  title = {{A comprehensive study of Convergent and Commutative Replicated Data Types}},
  author = {Shapiro, Marc and Pregui{\c c}a, Nuno and Baquero, Carlos and Zawirski, Marek},
  url = {https://inria.hal.science/inria-00555588},
  type = {Research Report},
  number = {RR-7506},
  pages = {50},
  institution = {{Inria -- Centre Paris-Rocquencourt ; INRIA}},
  year = {2011},
  month = Jan,
  keywords = {eventual consistency ; optimistic replication ; replicated data types ; distributed algorithms ; distributed systems ; Data replication ; commutative operations},
  pdf = {https://inria.hal.science/inria-00555588/file/techreport.pdf},
  hal_id = {inria-00555588},
  hal_version = {v1},
}

@misc{crdt-pure-op,
	title={Pure Operation-Based Replicated Data Types}, 
	author={Carlos Baquero and Paulo Sergio Almeida and Ali Shoker},
	year={2017},
	eprint={1710.04469},
	archivePrefix={arXiv},
	primaryClass={cs.DC}
}

@masterthesis{thesis-schulz,
	title={Assessment of Solutions to Modeling Exercises in Education},
	author={Schulz, Marius Daniel},
	year={2018},
	month={March},
	school={Technische Universität München},
	address={Munich, Germany}
}

@masterthesis{thesis-willand,
	title={Refactoring and Extending the UML Modeling Editor Apollon},
	author={Willand, Julian},
	year={2019},
	month={May},
	school={Technische Universität München},
	address={Munich, Germany}
}

@masterthesis{thesis-tobi,
	title={Apollon: Learning Platform for System Modeling in UML},
	author={Priesching, Tobias},
	year={2020},
	month={November},
	school={Technische Universität München},
	address={Munich, Germany}
}

@masterthesis{thesis-nucam,
	title={Integrating Semi-Automatic Grading of Modeling Exercises into the ArTEMiS platform},
	author={Mai Ton Nu Cam},
	year={2018},
	month={September},
	school={Technische Universität München},
	address={Munich, Germany}
}

@inproceedings{op-effect,
	author = {Li, Du and Li, Rui},
	title = {Preserving operation effects relation in group editors},
	year = {2004},
	isbn = {1581138105},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1031607.1031683},
	doi = {10.1145/1031607.1031683},
	abstract = {Consistency maintenance is a critical and challenging issue in many interactive groupware applications that can be modeled as group editors. This paper addresses two open consistency problems: divergence and operation effects relation violation. While the former has been partly solved, the latter has never been addressed in any published work. We propose a novel approach to solving both problems in the same framework. Particularly it preserves the effects relation of concurrent operations so that convergence is achieved automatically. Our work provides a new perspective into group editors and operational transformation algorithms.},
	booktitle = {Proceedings of the 2004 ACM Conference on Computer Supported Cooperative Work},
	pages = {457–466},
	numpages = {10},
	keywords = {operational transformation, group editors, consistency, concurrency control, collaborative systems, CSCW},
	location = {Chicago, Illinois, USA},
	series = {CSCW '04}
}

@article{cci,
	author = {Sun, Chengzheng and Jia, Xiaohua and Zhang, Yanchun and Yang, Yun and Chen, David},
	title = {Achieving convergence, causality preservation, and intention preservation in real-time cooperative editing systems},
	year = {1998},
	issue_date = {March 1998},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {5},
	number = {1},
	issn = {1073-0516},
	url = {https://doi.org/10.1145/274444.274447},
	doi = {10.1145/274444.274447},
	abstract = {Real-time cooperative editing systems allow multiple users to view and edit the same text/graphic/image/multimedia document at the same time for multiple sites connected by communication networks. Consistency maintenance is one of the most significant challenges in designing and implementing real-time cooperative editing systems. In this article, a consistency model, with properties of convergence, causality preservation, and intention preservation, is proposed as a framework for consistency maintenance in real-time cooperative editing systems. Moreover, an integrated set of schemes and algorithms, which support the proposed consistency model, are devised and discussed in detail. In particular, we have contributed (1) a novel generic operation transformation control algorithm for achieving intention preservation in combination with schemes for achieving convergence and causality preservation and (2) a pair of reversible inclusion and exclusion transformation algorithms for stringwise operations for text editing. An Internet-based prototype system has been built to test the feasibility of the proposed schemes and algorithms},
	journal = {ACM Trans. Comput.-Hum. Interact.},
	month = {mar},
	pages = {63–108},
	numpages = {46},
	keywords = {REDUCE, causality preservation, computer-supported cooperative work, consistency maintenance, convergence, cooperative editing, groupware systems, intention preservation, operational transformation}
}

@article{ev,
	author = {Vogels, Werner},
	title = {Eventually consistent},
	year = {2009},
	issue_date = {January 2009},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {52},
	number = {1},
	issn = {0001-0782},
	url = {https://doi.org/10.1145/1435417.1435432},
	doi = {10.1145/1435417.1435432},
	abstract = {Building reliable distributed systems at a worldwide scale demands trade-offs between consistency and availability.},
	journal = {Commun. ACM},
	month = {jan},
	pages = {40–44},
	numpages = {5}
}

@article{ev-2,
	author = {Vogels, Werner},
	title = {Eventually Consistent: Building reliable distributed systems at a worldwide scale demands trade-offs?between consistency and availability.},
	year = {2008},
	issue_date = {October 2008},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {6},
	number = {6},
	issn = {1542-7730},
	url = {https://doi.org/10.1145/1466443.1466448},
	doi = {10.1145/1466443.1466448},
	abstract = {At the foundation of Amazon’s cloud computing are infrastructure services such as Amazon’s S3 (Simple Storage Service), SimpleDB, and EC2 (Elastic Compute Cloud) that provide the resources for constructing Internet-scale computing platforms and a great variety of applications. The requirements placed on these infrastructure services are very strict; they need to score high marks in the areas of security, scalability, availability, performance, and cost effectiveness, and they need to meet these requirements while serving millions of customers around the globe, continuously.},
	journal = {Queue},
	month = {oct},
	pages = {14–19},
	numpages = {6}
}

@article{base,
	author = {Pritchett, Dan},
	title = {BASE: An Acid Alternative: In partitioned databases, trading some consistency for availability can lead to dramatic improvements in scalability.},
	year = {2008},
	issue_date = {May/June 2008},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {6},
	number = {3},
	issn = {1542-7730},
	url = {https://doi.org/10.1145/1394127.1394128},
	doi = {10.1145/1394127.1394128},
	abstract = {Web applications have grown in popularity over the past decade. Whether you are building an application for end users or application developers (i.e., services), your hope is most likely that your application will find broad adoption and with broad adoption will come transactional growth. If your application relies upon persistence, then data storage will probably become your bottleneck.},
	journal = {Queue},
	month = {may},
	pages = {48–55},
	numpages = {8}
}

@article{acid,
	author = {Haerder, Theo and Reuter, Andreas},
	title = {Principles of transaction-oriented database recovery},
	year = {1983},
	issue_date = {December 1983},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {15},
	number = {4},
	issn = {0360-0300},
	url = {https://doi.org/10.1145/289.291},
	doi = {10.1145/289.291},
	journal = {ACM Comput. Surv.},
	month = {dec},
	pages = {287–317},
	numpages = {31}
}

@article{ot-admis,
  title={An admissibility-based operational transformation framework for collaborative editing systems},
  author={Li, Du and Li, Rui},
  journal={Computer Supported Cooperative Work (CSCW)},
  volume={19},
  pages={1--43},
  year={2010},
  publisher={Springer}
}

@inproceedings{ot-json,
	author = {Jungnickel, Tim and Herb, Tobias},
	title = {Simultaneous editing of JSON objects via operational transformation},
	year = {2016},
	isbn = {9781450337397},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2851613.2852003},
	doi = {10.1145/2851613.2852003},
	abstract = {Real-time collaboration among geographically distributed users is becoming increasingly important in our private and professional lives. Operational Transformation (OT) is a well established technique for consistency maintenance in the domain of collaborative text editing. In this paper we expand the scope of OT to support simultaneous editing of shared JSON objects. The presented approach can be used in almost any modern web framework to implement collaboration tools that are, in contrast to popular real-time collaboration tools like Google Docs, no longer restricted to text documents. Alongside with a detailed presentation of the underlying data structures and mechanics we discuss how web applications can be designed to use our extension.},
	booktitle = {Proceedings of the 31st Annual ACM Symposium on Applied Computing},
	pages = {812–815},
	numpages = {4},
	keywords = {JSON, collaboration, consistency maintenance, operational transformation, web applications},
	location = {Pisa, Italy},
	series = {SAC '16}
}

@misc{sharedb,
  author = {Joseph Gentle and others},
  title = {ShareDB: Realtime database backend based on Operational Transformation (OT)},
  year = {2024},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/share/sharedb}},
  note = {Accessed on: 2024-03-21}
}

@inbook{lamport,
	author = {Lamport, Leslie},
	title = {Time, clocks, and the ordering of events in a distributed system},
	year = {2019},
	isbn = {9781450372701},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3335772.3335934},
	booktitle = {Concurrency: The Works of Leslie Lamport},
	pages = {179–196},
	numpages = {18}
}

@unpublished{vector-clock,
  author  = {Reinhard Schwarz and Friedemann Mattern},
  title   = {Detecting Causal Relationships in Distributed Computations: In Search of the Holy Grail1},
  institution = {Kaiserslautern - Fachbereich Informatik},
  year    = {1999},
  url  = {https://nbn-resolving.de/urn:nbn:de:hbz:386-kluedo-4006},
}

@article{ot-v-crdt,
	author = {Sun, David and Sun, Chengzheng and Ng, Agustina and Cai, Weiwei},
	title = {Real Differences between OT and CRDT in Correctness and Complexity for Consistency Maintenance in Co-Editors},
	year = {2020},
	issue_date = {May 2020},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {4},
	number = {CSCW1},
	url = {https://doi.org/10.1145/3392825},
	doi = {10.1145/3392825},
	abstract = {OT (Operational Transformation) was invented for supporting real-time co-editors in the late 1980s and has evolved to become core techniques widely used in today's working co-editors and adopted in industrial products. CRDT (Commutative Replicated Data Type) for co-editors was first proposed around 2006, under the name of WOOT (WithOut Operational Transformation). Follow-up CRDT variations are commonly labeled as "post-OT" techniques capable of making concurrent operations natively commutative in co-editors. On top of that, CRDT solutions have made broad claims of superiority over OT solutions, and often portrayed OT as an incorrect and inefficient technique. Over one decade later, however, CRDT is rarely found in working co-editors; OT remains the choice for building the vast majority of today's co-editors. Contradictions between the reality and CRDT's purported advantages have been the source of much confusion and debate in co-editing researcher and developer communities. To seek truth from facts, we set out to conduct a comprehensive and critical review on representative OT and CRDT solutions and working co-editors based on them. From this work, we have made important discoveries about OT and CRDT, and revealed facts and evidences that refute CRDT claims over OT on all accounts. These discoveries help explain the underlying reasons for the choice between OT and CRDT in the real world. We report these results in a series of three articles. In this article (the second in the series), we reveal the differences between OT and CRDT in their basic approaches to realizing the same general transformation and how such differences had resulted in different technical challenges and consequential correctness and complexity issues. Moreover, we reveal hidden complexity and algorithmic flaws with representative CRDT solutions, and discuss common myths and facts related to correctness and complexity of OT and CRDT. We hope the discoveries from this work help clear up common myths and confusions surrounding OT and CRDT, and accelerate progress in co-editing technology for real world applications.},
	journal = {Proc. ACM Hum.-Comput. Interact.},
	month = {may},
	articleno = {21},
	numpages = {30},
	keywords = {commutative replicated data type (CRDT), computer supported cooperative work (CSCW) and social computing, concurrency control, consistency maintenance, distributed/internet/cloud computing, operational transformation (OT), real-time co-editing}
}

@inproceedings{ot-x-crdt,
	author = {Mehdi, Ahmed-Nacer and Urso, Pascal and Balegas, Valter and Pergui\c{c}a, Nuno},
	title = {Merging OT and CRDT algorithms},
	year = {2014},
	isbn = {9781450327169},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2596631.2596636},
	doi = {10.1145/2596631.2596636},
	abstract = {Nowadays, a large number of collaborative editing applications have been developed. Some of them are deployed on the cloud such as Google Drive and Microsoft Office at SkyDrive. Massively used editing systems make use of operational transformation (OT), a traditional replication mechanism for concurrent document editing. Such algorithms do not scale well in peer-to-peer environments with dynamic groups. Recently, Commutative Replicated Data Types (CRDTs) were introduced as a new class of replication mechanisms whose concurrent operations are designed to be natively commutative. They ensure consistency of highly dynamic contents on peer-to-peer networks.Through this paper, we propose an architecture to take advantage of both approaches -- OT and CRDT -- and to improve the performance of collaborative editing applications. We merge both algorithms on the proposed architecture and we study their suitability.},
	booktitle = {Proceedings of the First Workshop on Principles and Practice of Eventual Consistency},
	articleno = {9},
	numpages = {4},
	keywords = {performance, operational transformation, experimentation, commutative replicated data types, collaborative editing, cloud, algorithms},
	location = {Amsterdam, The Netherlands},
	series = {PaPEC '14}
}

@inproceedings{treedoc,
  author={Preguica, Nuno and Marques, Joan Manuel and Shapiro, Marc and Letia, Mihai},
  booktitle={2009 29th IEEE International Conference on Distributed Computing Systems}, 
  title={A Commutative Replicated Data Type for Cooperative Editing}, 
  year={2009},
  volume={},
  number={},
  pages={395-403},
  keywords={Binary trees;Concurrency control;History;Convergence;Concurrent computing;Compaction;Distributed computing;Delay;Automatic control;Writing;commutative replicated data type;distributed algorithms;replicated data;co-operative editing;dense identifier space},
  doi={10.1109/ICDCS.2009.20}
}

@inproceedings{logoot,
  author={Weiss, Stephane and Urso, Pascal and Molli, Pascal},
  booktitle={2009 29th IEEE International Conference on Distributed Computing Systems}, 
  title={Logoot: A Scalable Optimistic Replication Algorithm for Collaborative Editing on P2P Networks}, 
  year={2009},
  volume={},
  number={},
  pages={404-412},
  keywords={Radiofrequency interference;Wikipedia;Scalability;International collaboration;Costs;Control systems;Convergence;Distributed computing;Collaborative tools;Online Communities/Technical Collaboration;P2P;Collaborative Editing},
  doi={10.1109/ICDCS.2009.75}
}

@inproceedings{flux,
	author = {Fisher, Bill},
	title = {Flux: A Unidirectional Data Flow Architecture for React Apps},
	year = {2015},
	isbn = {9781450335270},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/2742580.2742818},
	doi = {10.1145/2742580.2742818},
	abstract = {Flux is the application architecture used at Facebook to build large, client-side applications. Based on a unidirectional data flow and a central dispatcher, it allows developers to more easily reason about changes in state and manages dependencies across the data layer in a declarative way. Rather than a framework, Facebook has suggested Flux as an architectural pattern.While not dependent on React, it complements React and was developed alongside it. In this talk, we'll walk through the Flux data flow, examine the various parts of the pattern, and look at similarities and differences with other application architectures. Flux is where the entire suite of Facebook's front-end open source projects come together, so we'll get to see how ImmutableJS, Flow and Jest are used within Flux and React to optimize and test applications.},
	booktitle = {Applicative 2015},
	location = {New York, NY, USA},
	series = {Applicative 2015}
}

@misc{jsonpatch,
  title={RFC 6902: JavaScript Object Notation (JSON) Patch},
  author={Bryan, P and Nottingham, M},
  year={2013},
  publisher={RFC Editor},
	url={https://www.rfc-editor.org/rfc/rfc6902.html}
}

@misc{jsonpointer,
  title={RFC 6901: JavaScript Object Notation (JSON) Pointer},
  author={Bryan, P and Nottingham, M},
  year={2013},
  publisher={RFC Editor},
	url={https://www.rfc-editor.org/rfc/rfc6901.html}
}

@misc{jsonpatch-exp,
  author = {Thomas Parslow and others},
  title = {JSON Patch},
  year = {2023},
  howpublished = {\url{https://jsonpatch.com/}},
  url = {https://jsonpatch.com/},
  note = {Accessed on 2023-03-26}
}

@inproceedings{tcp,
  author={Kumar, Mohan and Gavrilovska, Ada},
  booktitle={IEEE INFOCOM 2016 - The 35th Annual IEEE International Conference on Computer Communications}, 
  title={TCP Ordo: The cost of ordered processing in TCP servers}, 
  year={2016},
  volume={},
  number={},
  pages={1-9},
  keywords={Throughput;Servers;Kernel;Sockets;Engines;Multicore processing;Linux},
  doi={10.1109/INFOCOM.2016.7524601}
}

